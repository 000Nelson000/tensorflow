% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/python.R
\name{python-list-combine}
\alias{bool}
\alias{float}
\alias{int}
\alias{python-list-combine}
\title{Combine values into a list containing a specified type}
\usage{
int(...)

float(...)

bool(...)
}
\arguments{
\item{...}{Objects to be combined}
}
\value{
A list containing values of the specified type
}
\description{
Combine values into a list of a specified type. These functions are similar
to the \code{c} function but are geared towards passing lists to
Python functions.
}
\details{
When a python API accepts a list of a given type it's often desirable to
specify the list as an R literal. Typically this would be done using the
\code{c} function, however this approach doesn't deal with lists
that contain \code{NULL} (since \code{c} will drop the \code{NULL}) nor
with single-element lists (since the R to python conversion layer will
treat these as scalars).

R APIs also typically convert numeric types behind the scenes as necessary
whereas python APIs will sometimes be more strict about types. These
functions allow explicit casting to the underlying type required by a
Python API (e.g. ensuring that \code{int(1, 2, 3)} is an integer even
though R integer literal sytnax was not used).
}
\examples{
int(1, 2, 3)
int(NULL, 42)
float(4)
bool(NULL, TRUE, FALSE)

}

